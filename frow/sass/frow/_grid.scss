// Grid system
//
// Generate semantic grid columns with these mixins.

// Centered container element
.frow-container {
    margin-right: auto;
    margin-left: auto;
    padding-left: $grid-gutter-width / 2;
    padding-right: $grid-gutter-width / 2;
}
@media (min-width: 768px) {
    .frow-container {
        width: 750px;
    }
}
@media (min-width: 992px) {
    .frow-container {
        width: 970px;
    }
}
@media (min-width: 1200px) {
    .frow-container {
        width: 1170px;
    }
}

// Flexible row
//
// Flexible rows contain your columns.

.frow {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-content: flex-start;

    &.gutters {
        margin-left: -$grid-gutter-width / 2;
        margin-right: -$grid-gutter-width / 2;

        &>* {
            padding-left: $grid-gutter-width / 2;
            padding-right: $grid-gutter-width / 2;
        }
    }

    // &>*:last-child {
    //     float: none;
    // }

    // &>div>img {
    //     width: 100%;
    // }

    // &>div, &>img {
    //     height: 100%;
    // }

    // Shortcuts
    &.centered {
        justify-content: center;
        align-items: center;
        align-content: center;
        height: 100%;
    }
    &.centered-column {
        justify-content: center;
        align-items: center;
        align-content: center;
        flex-direction: column;
        height: 100%;
    }
    &.row-start {
        flex-direction: row;
        justify-content: flex-start;
    }
    &.row-center {
        flex-direction: row;
        justify-content: center;
    }
    &.row-end {
        flex-direction: row;
        justify-content: flex-end;
    }
    &.column-start {
        flex-direction: column;
        align-items: flex-start;
        align-content: flex-start;
        justify-content: flex-start;
    }
    &.column-center {
        flex-direction: column;
        align-items: center;
        align-content: center;
        justify-content: flex-start;
    }
    &.column-end {
        flex-direction: column;
        align-items: flex-end;
        align-content: flex-end;
        justify-content: flex-start;
    }

    // Wrap
    &.wrap {
        flex-wrap: wrap;
    }
    &.wrap-reverse {
        flex-wrap: wrap-reverse;;
    }
    &.nowrap {
        flex-wrap: nowrap;
    }

    // Flex-direction
    &.direction-row {
        flex-direction: row;
    }
    &.direction-reverse {
        flex-direction: row-reverse;
    }
    &.direction-column {
        flex-direction: column;
    }
    &.direction-column-reverse {
        flex-direction: column-reverse;
    }

    // Justify-content
    &.justify-start {
        justify-content: flex-start;
    }
    &.justify-end {
        justify-content: flex-end;
    }
    &.justify-center {
        justify-content: center;
    }
    &.justify-between {
        justify-content: space-between;
    }
    &.justify-around {
        justify-content: space-around;
    }

    // Align-items
    &.items-start {
        align-items: flex-start;
    }
    &.items-end {
        align-items: flex-end;
    }
    &.items-center {
        align-items: center;
    }
    &.items-stretch {
        align-items: stretch;
    }
    &.items-baseline {
        align-items: baseline;
    }

    // Align-content
    &.content-start {
        align-content: flex-start;
    }
    &.content-end {
        align-content: flex-end;
    }
    &.content-center {
        align-content: center;
    }
    &.content-between {
        align-content: space-between;;
    }
    &.content-around {
        align-content: space-around;
    }
}

// Columns
//
// Generate the various columns widths.

$sizes: map-merge($sizes-mobile, $sizes-desktop);
$sizes-names: map-keys($sizes);

$all-columns: ();
@for $denominator from 1 through $grid-max-columns {
    @for $numerator from 1 through $denominator {
      @each $size in $sizes-names {
        $all-columns: append($all-columns,
            '.col-#{$size}-#{$numerator}-#{$denominator}',
                comma);
        }
    }
}
#{$all-columns} {
    width:100%;
}

@each $size in $sizes-names {
    @media (min-width: map-get($sizes, $size)) {
        @for $denominator from 1 through $grid-max-columns {
            @for $numerator from 1 through $denominator {
                .col-#{$size}-#{$numerator}-#{$denominator} {
                    width: percentage($numerator/$denominator);
                }
            }
        }
    }
}
